service:
  name: desafioserverless

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-dynamodb-local

custom: 
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodb:
    stages:
      - dev
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
  bucket: desafioserverless

provider:
  name: aws
  region: sa-east-1
  runtime: nodejs14.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"

functions:
  createTodos:
    handler: src/functions/createtodos.handle
    events:
      - http:
          path: /todos/{userid}
          method: GET
          cors: true
    # iamRoleStatements: 
    #   - Effect: Allow
    #     Action: 
    #       - dynamodb:Query
    #       - dynamodb:PutItem
    #     Resource: "arn:aws:dynamodb:${self.provider.region}:*:table/desafioserverless"
  listTodos:
    handler: src/functions/listtodos.handle
    events:
      - http:
          path: /todas/{userid}
          method: GET
          cors: true
    # iamRoleStatements: 
    #   - Effect: Allow
    #     Action: 
    #       - dynamodb:Query
    #     Resource: "arn:aws:dynamodb:${self.provider.region}:*:table/desafioserverless"

resources:
  Resources:
    dbDesafioserverless:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: desafioserverless
        ProvisionedThroughput: 
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        AttributeDefinitions:
          - AttributeName: userid
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: userid
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE